# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/GoogleCloudPlatform/github-actions/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  release:
    types: [created]
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: blue-green-canary    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-microapp-canary-deploy # TODO: update to deployment name
  IMAGE: micro-app
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  RELEASE: blue
  IS_GREEN_DEPLOYED: 'true'
  BIN_FOLDER: ./bin
  APP_VERSION: v0.0.1 

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    
    # Build the Docker image
    - name: Build
      run: |-
        # Strip git ref prefix from version
               
        APP_VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && APP_VERSION=$(echo $APP_VERSION | sed -e 's/^v//')
        
        BUILD_INFO=$(echo $GITHUB_SHA | cut -c 37-40)
        
        APP_VERSION="$APP_VERSION-build.$BUILD_INFO"
        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
        
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$APP_VERSION" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg APP_VERSION="$APP_VERSION" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$APP_VERSION"
    
    # Identify branch and setup files to deploy
    - name: Check for green branch and set RELEASE env variable
      if: ${{ contains(github.ref, 'stable') }}
      run: |-
        echo "RELEASE=green" >> $GITHUB_ENV
        echo "${RELEASE} release will be deployed"
      
    # Set up kustomize
    - name: Set up Kustomize
      working-directory: ./bin/
      run: |-
        echo "BIN_FOLDER=$(pwd)" >> $GITHUB_ENV
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
  
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      working-directory: ./deployments/canary/overlays/release/
      run: |-
        cd ./${RELEASE}/ 
        echo "Switched to `pwd` directory"
        ${BIN_FOLDER}/./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$APP_VERSION
        ${BIN_FOLDER}/./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME-$RELEASE
        kubectl get services -o wide
    
    # Check if green deployment has been rolled out even once and assign IS_GREEN_DEPLOYED true/false
    # If false means that blue needs to take 100% of the traffic
    - name: Check if green release is present or not
      run: echo "IS_GREEN_DEPLOYED=$(if [ "$(kubectl get pod -l app=micro-app -l release=stable -o jsonpath='{.items}')" = "[]" ]; then echo "false"; else echo "true"; fi)" >> $GITHUB_ENV

    # Switch traffic for no green release 
    - name: Create blue release and modify traffic weight to 100% for blue if IS_GREEN_DEPLOYED=false
      if: ${{ env.RELEASE == 'blue' && env.IS_GREEN_DEPLOYED == 'false' }}
      working-directory: ./deployments/canary/overlays/traffic/blue/
      run: |-
        echo "Switched to `pwd` directory"
        ${BIN_FOLDER}/./kustomize build . | sed 's/weight: 20/weight: 100/' | sed 's/weight: 80/weight: 0/' | kubectl apply -f -
        echo "Switched 100% of traffic to blue" 

    # Switch traffic for regular releases
    - name: Create blue/green release and modify traffic weight
      if: ${{ env.IS_GREEN_DEPLOYED == 'true' }}
      working-directory: ./deployments/canary/overlays/traffic/
      run: |-
        cd ./${RELEASE}/
        echo "Switched to `pwd` directory"
        ${BIN_FOLDER}/./kustomize build . | kubectl apply -f -
        echo "Created service and Switched traffic"
